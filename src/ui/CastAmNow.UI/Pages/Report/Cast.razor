@page "/cast"

<div class="cast-container">
    <div class="cast-card">
        <h3 class="cast-card-title">Cast a Civic Horror</h3>

        <div class="form-group">
            <input type="text" class="cast-input-2" placeholder="Enter a title..." @bind="NewHorror.Title" @onfocus="() => IsExpanded = true" />
        </div>

        @if (IsExpanded)
        {
            <div class="form-group">
                <textarea class="cast-input-2" placeholder="Describe the horror and add media..." @bind="NewHorror.Description"></textarea>
            </div>

            <div class="form-group">
                <InputFile OnChange="HandleFileSelected" multiple accept="image/*,video/*" /> 
            </div>

            <div class="form-group">
                <label>
                    <input type="radio" name="category" Value="Ghost"  />
                    Ghost
                </label>
                <label>
                    <input type="radio" name="category" Value="Monster" />
                    Monster
                </label>
                <label>
                    <input type="radio" name="category" Value="Psychological"/>
                    Psychological
                </label>
            </div>

            @if (NewHorror.Previews.Count > 0)
            {
                <div class="preview-area">
                    @foreach (var preview in NewHorror.Previews)
                    {
                        if (preview.IsVideo)
                        {
                            <video src="@preview.Url" controls width="150" style="margin-right:10px;"></video>
                        }
                        else
                        {
                            <img src="@preview.Url" alt="preview" width="150" style="margin-right:10px;" />
                        }
                    }
                </div>
            }

            <div class="cast-actions">
                <button class="cast-btn" @onclick="SubmitHorror" disabled="@string.IsNullOrWhiteSpace(NewHorror.Title)">
                    Cast Am Now ðŸš¨
                </button>
            </div>
        }
    </div>
</div>

@code {
    private bool IsExpanded = false;
    private string SelectedCategory = "";

    private HorrorSubmission NewHorror = new();

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles())
        {
            NewHorror.Attachments.Add(file.Name);

            var buffer = new byte[file.Size];
            await file.OpenReadStream().ReadAsync(buffer);
            var base64 = Convert.ToBase64String(buffer);
            var mimeType = file.ContentType;

            var url = $"data:{mimeType};base64,{base64}";
            bool isVideo = mimeType.StartsWith("video/");
            NewHorror.Previews.Add(new PreviewItem { Url = url, IsVideo = isVideo });
        }
    }

    private void SubmitHorror()
    {
        NewHorror.Category = SelectedCategory;

        Console.WriteLine($"Title: {NewHorror.Title}");
        Console.WriteLine($"Description: {NewHorror.Description}");
        Console.WriteLine($"Category: {NewHorror.Category}");
        Console.WriteLine($"Files: {string.Join(", ", NewHorror.Attachments)}");
        Console.WriteLine($"Previews: {string.Join(", ", NewHorror.Previews.Select(p => p.Url))}");

        // Reset form
        NewHorror = new HorrorSubmission();
        SelectedCategory = "";
        IsExpanded = false;
    }

    public class HorrorSubmission
    {
        public string Title { get; set; } = "";
        public string Description { get; set; } = "";
        public string Category { get; set; } = "";
        public List<string> Attachments { get; set; } = new();
        public List<PreviewItem> Previews { get; set; } = new();
    }

    public class PreviewItem
    {
        public string Url { get; set; } = "";
        public bool IsVideo { get; set; } = false;
    }
}