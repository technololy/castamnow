@page "/"
@using CastAmNow.Core.Dtos.Defect
@inject IDefectApi IDefectApi

<div class="cast-container">
    <div class="cast-card">
        <h3 class="cast-card-title">What civic defect would you like to cast..</h3>

        <div class="form-group">
            <input type="text" class="cast-input-2" placeholder="Enter a title..." @bind="_newHorror.Title" @onfocus="() => _isExpanded = true" />
        </div>

        @if (_isExpanded)
        {
            <div class="form-group">
                <textarea class="cast-input-2" placeholder="Describe the defect and add media..." @bind="_newHorror.Description"></textarea>
            </div>

            <div class="form-group">
                <InputFile OnChange="HandleFileSelected" multiple accept="image/*,video/*" MaxFileSize="10485760" /> 
            </div>

            <div class="form-group">
                <label>
                    <input type="radio" name="Killer Roads" Value="Killer Roads" checked="@(_selectedCategory == "Killer Roads")"  />
                        Killer Roads
                    </label>
                <label>
                    <input type="radio" name="Bad Buildings" checked="@(_selectedCategory == "Bad Buildings")"/>
                        Bad Buildings
                    </label>
                <label>
                    <input type="radio" name="Others" checked="@(_selectedCategory == "Others")"/>
                        Others
                    </label>
            </div>

            @if (_newHorror.Previews.Count > 0)
            {
                <div class="preview-area">
                    @foreach (var preview in _newHorror.Previews)
                    {
                        if (preview.IsVideo)
                        {
                            <video src="@preview.Url" controls width="150" style="margin-right:10px;"></video>
                        }
                        else
                        {
                            <img src="@preview.Url" alt="preview" style="width:150px; height:auto; margin-right:10px;" />                        }
                        }
                </div>
            }

            <div class="cast-actions">
                <button class="cast-btn" @onclick="SubmitHorror" disabled="@string.IsNullOrWhiteSpace(_newHorror.Title)">
                    Cast Am Now 🚨
                </button>
            </div>
        }
    </div>

    <div class="cast-feed">
        @foreach (var cast in _casts)
        {
            <div class="cast-item">
                <div class="cast-user">@cast.User</div>
                <div class="cast-text">@cast.Text</div>
                <div class="cast-time">@cast.TimePosted.ToString("MMM d, h:mm tt")</div>
            </div>
        }
    </div>
</div>

@code {
    //private string? _newCast;
    private bool _isExpanded;
    private string _selectedCategory = "";
    private List<Cast> _casts = [];
    [CascadingParameter] public IModalService? Modal { get; set; }
    
    private HorrorSubmission _newHorror = new();
    CreateDefectDto _createDefectDto = new();
    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles())
        {
            _newHorror.Attachments.Add(file.Name);

            var mimeType = file.ContentType;
            if (mimeType.StartsWith("image/"))
            {
                // Use a resized image for preview
                var resizedFile = await file.RequestImageFileAsync(mimeType, 300, 300);
                await using var stream = resizedFile.OpenReadStream(maxAllowedSize: 5_000_000);
                var buffer = new byte[resizedFile.Size];
                await stream.ReadAsync(buffer);
                var base64 = Convert.ToBase64String(buffer);
                var url = $"data:{mimeType};base64,{base64}";
                _newHorror.Previews.Add(new PreviewItem { Url = url, IsVideo = false });
            }
            else if (mimeType.StartsWith("video/"))
            {
                await using var stream = file.OpenReadStream(maxAllowedSize: 20_000_000);
                var buffer = new byte[file.Size];
                await stream.ReadAsync(buffer);
                var base64 = Convert.ToBase64String(buffer);
                var url = $"data:{mimeType};base64,{base64}";
                _newHorror.Previews.Add(new PreviewItem { Url = url, IsVideo = true });
            }
        }
    }
    
    private async Task SubmitHorror()
    {
        _newHorror.Category = _selectedCategory;

        Console.WriteLine($"Title: {_newHorror.Title}");
        Console.WriteLine($"Description: {_newHorror.Description}");
        Console.WriteLine($"Category: {_newHorror.Category}");
        Console.WriteLine($"Files: {string.Join(", ", _newHorror.Attachments)}");
        Console.WriteLine($"Previews: {string.Join(", ", _newHorror.Previews.Select(p => p.Url))}");
        _newHorror.Attachments = await ConvertEachAttachmentToUrls(_newHorror.Attachments);
        var submit = await CastedService.SubmitCastedDefectsAsync(_newHorror);
        _isExpanded = false;
    }

    private async Task<List<string>> ConvertEachAttachmentToUrls(List<string> newHorrorAttachments)
    {
        List<string> urlsList = new();
        foreach (var singleAttachment in newHorrorAttachments)
        {
            //await IDefectApi.DefectService. (singleAttachment);
        }

        return urlsList;
    }


    protected override async Task OnInitializedAsync()
    {
        // Dummy seed data
        _casts =
        [
        new Cast { User = "👤 AddLibChanger", Text = "NEPA don take light again 😡", TimePosted = DateTime.Now.AddMinutes(-5) },
new Cast { User = "👤 IndomitableBay", Text = "Fuel price don high! 🚗⛽", TimePosted = DateTime.Now.AddHours(-1) },
new Cast { User = "👤 ChikaraciousGamble", Text = "Who get update for better job abeg? 🙏", TimePosted = DateTime.Now.AddHours(-3) },
new Cast { User = "👤 RiverDamination", Text = "Traffic for 3rd Mainland Bridge na wah o 🚦", TimePosted =
DateTime.Now.AddDays(-1) }
        ];
        var defects = await CastedService.GetCastedDefectsAsync();
        foreach (var defectQuery in defects)
        {
            var defect = new Cast
            {
                User = "👤 Anonymous",
                Text = defectQuery.Description,
                TimePosted = DateTime.Now,
                
            };
            _casts.Add(defect);
        }

    }
    
    private class Cast
    {
        public string User { get; set; } = string.Empty;
        public string Text { get; set; } = string.Empty;
        public DateTime TimePosted { get; set; }
    }
    
    public class HorrorSubmission
    {
        public string Title { get; set; } = "";
        public string Description { get; set; } = "";
        public string Category { get; set; } = "";
        public List<string> Attachments { get; set; } = new();
        public List<PreviewItem> Previews { get; set; } = new();
    }

    public class PreviewItem
    {
        public string Url { get; set; } = "";
        public bool IsVideo { get; set; }
    }
}